< 배당금프로젝트 - 간단하게 축약한 회원관리 >
회원관리기능은 security 패키지에서 관리한다.


=============================== << 스프링 시큐리티 >> ===============================
- @ElementCollection
  : 1:N의 매핑으로 테이블에 데이터가 저장.
  - 참고 블로그 : https://velog.io/@thsruddl77/Basic-attribute-type-should-not-be-a-container

- PasswordEncoder


< 스프링 시큐리티를 이용한 로그인 (최소한의) 인증 구현 >
1. 사용자 Entity (MemberEntity.java)
   - 인증 시 사용할 Entity.
   - UserDetails 인터페이스 구현.

2. 로그인인증 Service (MemberService.java)
   - 인증 시 사용할 서비스.
   - UserDetailsService 인터페이스 구현.
   - loadUserByUsername() 메서드 필수구현.

3. JwtAuthenticationFilter.java
   - 인증필터구현
   - OncePerRequestFilter 상속받아 생성.
   - doFilterInternal() 메서드 필수구현.
   - 사용자가 signup, signin api를 호출했을 때 바로 해당 컨트롤러로 요청이 들어오는 것은 아니다.
     컨트롤러로 요청이 들어오기 전에 제일 먼저 필터를 거치게 된다.
     ( 컨트롤러 요청 -> 필터 -> 서블릿 -> 인터셉터 -> aop layer를 거친 후 컨트롤러 호출.
       응답을 내보낼 때는 위의 과정을 반대로 거쳐 내보낸다. )
     OncePerRequestFilter 라는 필터를 정의해주게 되면 모든 요청이 올 때 마다 (한 요청당 한 번)
     필터 실행.
     따라서 컨트롤러 실행 전의 request. 컨트롤러 실행 후 응답 시 response를 가공가능.
     So, 컨트롤러에 요청이 들어올 때 마다 사용자토큰의 포함여부, 유효성 여부 등 확인가능.

4. SecurityConfiguration.java
   - 스프링 시큐리티 설정정보.
   - WebSecurityConfigurerAdapter 상속받아 구현.
   - @EnableWebSecurity 어노테이션 적용필수.
   - @EnableGlobalMethodSecurity(prePostEnabled = true)
     : configure() 메서드에서 http.antMatches().gasRole()을 통해
       특정 권한을 가진 사람만 해당 경로에 접근할 수 있도록 설정가능하지만
       hasRole() 권한체크를 해당 설정파일 외부에서 어노테이션으로 처리가능하도록 하기위해 추가하는 어노테이션.
       (해당 어노테이션을 사용해 '필요권한설정'을 해당 설정파일에서 모두 부여하지않고
        실제 권한을 적용할 컨트롤러에서 직접설정 가능하도록 한다.)

   - rest api로 JWT 토큰 인증방식을 구현 시 설정필수
     1. 사용하지 않을 부분에 대한 disable 처리
        - http.httpBasic().disable().csrf().disable()
     2. session stateless 처리
        : 로그인을 session이 아닌 JWT 토큰으로 구현했기에 상태정보를 저장하지 않는 stateless 특징가짐.
          (세션으로 구현시에는 상태를 가지고 jwt 토큰을 이용해 구현시 상태를 가지지않음.)
        - sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)

   - permitAll()
     : 해당경로에 대해 인증없이 무조건적으로 권한허용.
     : 회원가입, 로그인의 경우는 토큰없이 접근가능해야함. (JWT 토큰은 로그인 후 생성되므로.)
     - .and()
        .authorizeRequests()
        .antMatchers("/**/signup", "/**/signin").permitAll()

   - addFilterBefore() : 필터의 실행 순서 정의
     - UsernamePasswordAuthenticationFilter.class : 스프링에서 정의되어있는 필터
     - .and()
        .addFilterBefore(this.authenticationFilter, UsernamePasswordAuthenticationFilter.class);

5. Controller에 인증권한부여
   - @PreAuthorize("hasRole('WRITE')")
     : SecurityConfiguration.java에 @EnableGlobalMethodSecurity(prePostEnabled = true) 적용으로
       컨트롤러에서 권한직접부여 가능.
     : 해당 어노테이션을 Controller에 추가 시 쓰기 권한이 있는 유저만 해당 api 호출가능.
     : hasRole()에는 Authority.java 파일에서 권한정의 시 작성해준 값에서 ROLE_ 를 제외한 문자열작성.
       ('ROLE_'이라는 prefix로 권한을 시작하는 이유는 스프링 시큐리티가 지원하는 기능들을 쓰기 위함임.)
   - 권한이 없는 사용자가 해당 api 호출 시 403 (Forbidden)에러 출력됨.

6. api 호출시 인증관련 에러해결
   - 발생에러
     : org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.example.dividend.persist.entity.MemberEntity.roles, could not initialize proxy - no Session
       	at org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:606) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
       	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:218) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
       	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
       	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
       	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
       	at java.base/java.util.Spliterators$IteratorSpliterator.estimateSize(Spliterators.java:1821) ~[na:na]
       	at java.base/java.util.Spliterator.getExactSizeIfKnown(Spliterator.java:408) ~[na:na]
       	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:483) ~[na:na]
       	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) ~[na:na]
       	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913) ~[na:na]
       	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:na]
       	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578) ~[na:na]
       	at com.example.dividend.persist.entity.MemberEntity.getAuthorities(MemberEntity.java:40) ~[main/:na]
       	at com.example.dividend.security.TokenProvider.getAuthentication(TokenProvider.java:103) ~[main/:na]
   - 해결방법 : role은 호출 시 여러정보를 가져오는 list 형태이기에 호출부에 @Transactional 어노테이션을 추가해줘야한다.
   - 도움받은 블로그 : https://velog.io/@chocochip/failed-to-lazily-initialize-a-collection-of-role-%EC%97%90%EB%9F%AC





=============================== << JWT (Json Web Token) >> ===============================
1. JWT
   : 사용자 인증 및 식별에 사용되는 토큰
   - 토큰은 사용자 정보를 포함한다.
   - Java 뿐 아닌 다양한 언어를 지원한다. (토큰을 주고받는 서버가 동일하지 않아도 된다.)
   - 한번 토큰이 생성되면 상태나 토큰에 대한 정보를 서버에서 관리하지 않는 것이 특징이다.
     (토큰 만료시간 필수, 토큰에 만료시간이 존재하지 않으면 이후에 토큰 유출시 임의로 서버에서 처리가 불가하기에 보안문제 발생가능.)
   - 세션과 같은 방법으로 사용자 정보를 처리할수도 있지만
     특별히 다른 방법을 써야하는 이유가 있는게 아니라면
     토큰을 이용한 구현방법이 일반적이기도 하고 세션방식보다 장점도 많아서
     토큰인증의 가장 기본인 JWT에 대해 이해해야지 이후에 서드파티(?)를 이용한 로그인, OAuth 같은 인증방법들도 적용가능.


2. JWT 구조
   : 아래의 구조는 .으로 구분된다.
   - Header : 토큰의 타입(ex JWT), 적용된 알고리즘에 대한 정보.
   - Payload : 사용자와 토큰에 대한 속성 정보 (ex 로그인한 사용자의 이름, 토큰만료시간 등)
               Payload는 JWT 토큰만 가지고 있으면 누구나 디코딩해서 정보를 열어볼 수 있다는 특징이있다.
               따라서 비밀번호같은 민감정보는 포함하고 있으면 안된다.
   - Signature : 서명에 대한 부분.
                 토큰이 유효한지 위조된 것인지 확인하기 위해 사용된다.
                 서명을 하기위해 해당 비밀키를 필요로하게 된다.


< 토큰생성 >
1. 비밀키 생성
   - 토큰 생성시 HS512알고리즘 사용을 위해 -> 512비트(64바이트 이상)의 시크릿키 사용.
   - 평문을 사용하기보다는 base64로 인코딩한 값을 사용.
   - 터미널에서 생성가능.
     : 평문키 파일을 생성해 base64로 인코딩한 새파일 생성
        C:\workspace\Dividend\src\main\resources\token>certutil -encode jwt_secret_key.txt jwt_secret_key_encoding.b64
        입력 길이 = 46
        출력 길이 = 122
        CertUtil: -encode 명령이 성공적으로 완료되었습니다.
   - 도움받은 블로그 : https://interconnection.tistory.com/120

2. application.yml에 설정 추가
   - jwt:
        secret: '생성한 비밀키 등록'

3. TokenProvider.java





=============================== << 암호화 알고리즘 >> ===============================
평문 : 암호화 전 해독가능한 상태
암호문 : 암호화된 형태의 메시지
암호화(encryption) : 평문 -> 암호문
복호화(decryption) : 암호문 -> 평문
대칭키 : 동일키를 이용한 암,복호화시 대칭키를 사용한다고 한다.
비대칭키 : 메시지를 암,복호화하는 키가 다르면 비대칭키를 쓰는 알고리즘을 사용한 것이다.





=============================== << 예외처리 >> ===============================
서비스에서는 예외를 잘 처리하는 것이 중요하다.
예외가 발생하지 않도록 하는 것도 중요하지만 에러를 잘 발생시켜주는 것도 중요하다.
클라이언트, 서버 개발자가 에러 내용을 보고 대응할 수 있도록 에러를 발생시켜줘야한다.
따라서 서버에서 문제 발생 시 Http Status Code를 기반으로 해당 문제에 대응되는 상태코드를 응답으로 내려줘야한다.
에러코드를 정확히 내려주면 어디서 어떤 문제가 발생했는지 파악이 쉽다.
또한 클라이언트에서도 발생한 에러에 대한 처리를 각각 수행 가능하도록 할 수 있게 한다.


< HTTP Status Code >
200 : 성공
400 : 클라이언트에서 잘못된 요청 시 발생하는 에러.
    - 400 Bad Request : 잘못된 요청
    - 401 Unauthorized : 로그인 시 인증처리관련 문제 발생으로 인한 에러.
    - 403 Forbidden : 접근이 금지된 경로에 대한 요청시 발생 에러.
    - 404 Not Found
500 : 서버에서 로직상 발생하는 에러.


< Custom Exception을 이용한 예외처리 >
- 에러 처리를 위한 여러 방법 중 하나.

현재 프로젝트에서는 RuntimeException 에러 발생시 단순히 500 상태코드를 응답으로 반환한다.
그리고 콘솔창으로 확인하면 실제 발생한 에러에 대한 내용을 확인 가능하다.
위의 에러처리는 좋은 에러처리로 볼 수 없다.
예를 들어 배당금내역 조회 시 등록되어있지 않은 회사에 대한 배당금내역을 조회하는 경우 500 에러가 발생하는데
사실 이 경우에는 클라이언트에서 등록되어있지 않은 회사에 대한 요청을 한 것이므로 서버 로직상에서 에러가 발생한 경우로 보기 어렵다.
클라이언트에서 잘못된 요청이 서버에 들어온 경우이므로 400번대 에러가 적합하다.

1. 에러발생
   : 기존 new RuntimeException() 으로 발생시켰던 에러를
     Custom Exception 구현체를 이용해 상황에 맞는 에러를 발생시키도록 처리한다.
2. ExceptionHandler를 통한 에러처리
   : new Exception() 으로 발생시켰던 에러를 처리하기 위해
     특정 에러에 대한 처리를 다루는 핸들러를 생성한다.
   - @ControllerAdvice 어노테이션을 추가.
   - 서비스에서 지정된 에러가 발생하면 해당 에러를 catch해 http response로 던져준다.
   - 필터와 비슷하게 컨트롤러보다 좀 더 바깥쪽에서 동작하는 layer.
     (필터처럼 멀지않고 컨트롤러와 상대적으로 가까움.)





=============================== << 로그 >> ===============================
< 로그레벨 >
로그메시지 레벨을 적절하게 사용하는 것은 중요하다.

DEBUG : 프로그램 디버깅을 위한 정보 로깅시 사용하는 레벨.
      - 개발과정에서는 로그에 노출되지만 서비스되는 서버에서는 노출시키지 않는 것이 일반적.
INFO : 실제 서비스에서 파악이 필요한 정보 로깅시 사용 레벨.
       단순 정보를 넘어서 문제가 될 수 있는 부분,
       아직 예외가 발생한 상황은 아니지만 정상적이지 않은 상황일 때 경고성 메시지 로깅시 사용가능.
WARN :
ERROR : 실제 에러가 발생한 케이스에 사용하는 레벨.


< 로그출력 >
개발시에는 로그를 콘솔에 출력해 확인하지만
실제 서비스에서는 어떻게 어디에 남길지도 결정해야한다.
일반적으로는 파일을 생성해 파일에 로그 내용을 남기는 방법을 사용한다.
여러 서버에서 서비스가 운영되는 경우에는 로그용 스토리서버를 따로 운영해서
해당 서버로 로그를 발송해 로그 중앙화를 수행하기도 한다.
이 때 많이 사용하는 기술스택으로는 엘라스틱서치(?)가 있다.
1. console
2. file
3. 중앙화


< 파일로 로그남기기 >
1. 파일로 로그 남길 경우 고려해야할 부분
   - 로그파일의 사이즈 고려.
     : 서비스가 운영되다보면 파일에 로그가 계속 쌓이게 되면서 파일의 사이즈가 커질 수 있다.
       따라서 로그 파일의 사이즈가 일정 크기 이상을 벗어나지 않도록 로테이션을 시켜줘야한다.
   - 파일 저장 기간 고려.
     : 생성된 로그파일을 어느 정도의 기간동안 보관할지 결정이 필요하다.
     - 기록이 중요한 로그내용은 몇 년 까지도 보관하기도 한다.
       또한 몇일 정도만 보관이 필요한 로그도 존재할 수 있다.
       이는 어떤 서비스인지, 어떤 로그 내용인지에 따라 달라질 수 있다.

2. 콘솔에 출력할 로그와 파일에 저장할 로그 정의
   - logback-spring.xml 파일 참고

3. 서비스 구현시에는 System.out.println 같은 표준 출력은 남기면 안된다.
   그를 대체해 모두 로그로 정보를 남기도록 한다.
   어떻게 데이터 입력이 들어갔는지 확인해보고 싶다면
   System.out.println를 사용해 데이터를 찍어보는 게 아니라
   로그레벨을 DEBUG로 설정해 로그를 남기도록 한다.

4. 로그 남기기의 이점.
   : 로그를 잘 남기는 습관이 있으면
     개발하고 운영 시 문제가 발생했을 때 에러를 찾거나
     로그를 기반으로 해서 얼마나 많은 사용자가 접근했는지,
     어떤 api를 가장 많이 호출했는지 등 통계정보를 내는 것도 가능하다.





=============================== << 테스트코드 >> ===============================
< 테스트코드와 버그 >
테스트코드를 작성하게 되면
개발 -> 빌드 -> 배포 -> 서비스에 접근해 직접 테스트를 수행했을때 버그를 발견하게 되면
버그를 수정하고 위의 과정을 또 반복해야한다. (개발자 생산성 저하)
하지만 테스트코드를 작성하게되면 버그 발생 시 빌드 과정에서 이미 fail이 발생하기 때문에
버그의 발견이 빨라진다.
추후 기능이 추가되거나 로직이 변경되었을 때도 테스트코드를 이용해 기존 기능이 정상 동작하는지
확인이 가능하다는 이점도 있다.


< 테스트코드의 이점 >
1. 버그를 빠르게 찾는데 도움이된다.
2. 비즈니스 코드의 품질 자체를 향상시킬 수 있다.
   : 코드가 기능별로 모듈화 되어있지 않거나 한 메서드에서 너무 많은 역할을 담당하게되면
     단위테스트 코드 작성 자체가 어려워지기에 강제적으로 코드에 대한 고민을 한번더 할 수 있기 때문이다.
     또한 테스트코드를 작성하다보면 메서드명과 실제 수행하는 동작이 일치하지 않는 경우도 있다.


< 좋은 테스트코드 >
잘 작성된 비즈니스 코드가 있어야 좋은 테스트코드가 만들어진다.

1. 무엇을 테스트 하는가

2. 기능이 독립적인가
   - 기능 자체가 독립적일 것
     : 해당 기능을 테스트하기 위해서 부가적으로 너무 많은 기능들이 호출되지 않도록 해야한다.
       이는 테스트코드 이전에 비즈니스 로직적으로 모듈화가 잘 되어있다고 보기 어렵다.

   - 테스트 실행환경에서 독립적일 것
     : 테스트코드가 내 컴퓨터에서만 동작하거나 테스트코드를 수행하기 위해서
       mysql을 동일한 포트로 띄워야만 테스트되거나
       별도의 디렉토리 경로를 생성해놔야 하거나 하면 좋은 테스트코드로 보기 어렵다.
       기능에 대한 검증이 아니라 실행환경 맞추는데 더 많은 에너지를 쓰기 때문이다.
     : 실행 메서드 순서에 dependency가 걸리는 것도 좋은 테스트코드가 아니다.
       a -> b 수행시 성공이지만 b를 먼저 실행하는 경우 fail이라면 안된다는 것이다.
       코드간의 간섭으로 인해 테스트코드 실행결과가 달라지지 않도록 해야한다.

3. 가독성이 좋은가
   : 어떤 기능을 어떻게 테스트하고자 하는지 명확하게 알 수 있도록 하는게 가장 좋다.
     잘 짜여진 테스트코드가 있다면 복잡한 비즈니스 로직이 있어도
     테스트코드만 보고 어떤 기능을 수행하는 로직인지 파악할 수 있기도 하다.


< 테스트코드 작성방법 >
1. given : 주어진 상황에서 (input 정의)
2. when : 어떤 상황이 발생했을 때 (테스트하려는 기능 수행)
3. then : 특정 결과를 기대 ()


< 테스트코드 커버리지 >
1. 테스트코드 커버리지
   : 전체 코드 중 테스트 코드가 커버하는 범위

테스트코드 커버리지가 높을수록 좋겠지만 효율성이 떨어지는 측면도 있다.
처음에는 중요한 로직에 대해서 우선적으로 테스트코드를 작성할 것이다.
그리고 문제가 발생할 여지가 적은 코드들에 대해 순차적으로 테스트코드를 작성하게 된다.
코드 커버리지를 달성하기 위해서는 실제로 사용하지 않는 인터페이스를 구현해야하는 등의 작업이 요구가 될 수 있다.
이런 테스트코드는 효용성도 없고 테스트코드로서의 의미도 없기 때문에
커버리지를 100% 달성하는 것이 무조건 좋다고 할 수 없다.
따라서 커버리지가 일정 퍼센트에 도달하게 되면 에너지 대비 효율성이 떨어질 수 밖에 없다.

테스트코드가 정말 의미있는 테스트를 수행하고 있는지,
실수를 잡아내기에 충분한지
다뤄야할 테스트범위를 다루고 있는지 등에 대해 고민해보는 것이 더 유용할 수 있다.


< 테스트 주도 개발 >
- TDD : Test Driven Development
- 초기에 모두 실패하는 테스트코드를 작성하고 해당 테스트코드를 성공시키는 코드를 작성하고
  문제가 발생하면 다시 코드를 수정하는 개발 방법.





=============================== << README >> ===============================
- 깃허브 링크로 프로젝트에 들어가게되면 가장 첫 화면에 보이는 문서.
- 깃에 업로드하는 프로젝트의 루트 경로에 'README.md' 라는 이름으로 작성된 문서.
- md 확장자
  : 마크다운의 약자 (마크다운으로 작성된 파일)
    링크, 이미지 삽입가능.
    코드를 가독성있게 삽입도 가능.
- 마크다운
  : 마크업 언어의 일종.
    일반적인 마크업 언어보다 쉽고 간단하게 사용가능.
    여러 태그로 이루어진 html 같은 마크업 언어보다 문법이 단순해 비교적 내용을 보기 편함.


< 마크다운 문법 >
GitHubGist에서 간단히 readme파일 작성해 테스트해볼 수 있음.
(파일명.md로 제목 입력 -> Edit new file에 마크다운 언어로 작성 -> Preview에서 출력화면 확인가능 )
1. 제목 : #의 개수로 제목의 폰트 조절가능.
    #
    ##
    ###
    ####
    ===
    ---
2. 리스트 : tab을 통해 리스트의 레벨 표현도 가능.
    * 또는 - : 앞에 .이 붙어 리스트목록으로 출력가능.
    1. : 앞에 숫자를 붙힌 리스트로 표현가능.
3. 텍스트 강조
    **굵게**
    __굵게__
    *기울게*
    _기울게_
4. 링크
    [출력할 글자](http://링크.경로)
5. 이미지
    ![이미지이름](사진명.경로)
6. 표
    |제목셀1|제목셀2|제목셀3|제목셀4|
    |---|---|---|---|
    |내용1|내용2|내용3|내용4|
    |내용1|내용2|내용3|내용4|
    |내용1|내용2|내용3|내용4|





=============================== << Git >> ===============================
Git에서는 commit, push 외에도 굉장히 다양한 기능들을 제공한다.

- Issues 탭
  - Repository > Issues 탭 > New Issue 버튼 클릭 시 새로운 이슈 생성 가능.
  : 이슈를 생성하고 관리하는 기능도 지원한다.
    프로젝트의 버그와 관련된 이슈를 생성할 수 있고
    신규 feature 기능을 이슈에 작성하기도 한다.
    commit 시 이슈넘버 입력 시 자동으로 해당 커밋은 이슈와 연결되어 기록된다.
    구현해야할 내용, 이슈내용을 등록해놓으면 해당 관련 기록들을 훨씬 빨리 찾아볼 수 있다.
    단순히 commit 메시지를 남기는 것 보다 이슈를 남겨서 commit 기록과 연동해 사용하면
    commit 내용이 구체적으로 어떤 이슈가 있어서 개발하게 된 것인지,
    신규 feature는 어떤 내용이고 버그는 어떤 문제가 있었는지 잘 관리할 수 있다.
    또한 이슈의 하단에서 추가 코멘트를 작성해 협업에 활용할 수 있다.

- 참고 블로그
  : https://velog.io/@dumbveloper_100/GitHub%EC%9C%BC%EB%A1%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B4%80%EB%A6%AC-Issue-Project-Milestone





=============================== << 서비스 배포 방법 >> ===============================
- 분산서버와 배포
서버가 분산되어 있을 때 각 서버들의 데이터들은 어떻게 동기화를 시키고
각 서버들의 요청을 어떻게 분산하고 어떻게 데이터를 쓰고 읽어오는지도 공부해보는 것이 좋다.


< 서비스 배포 >
서비스들을 개발하고 배포한다는 것은 우리가 구현한 코드를 실행 가능한 형태로 서버 컴퓨터로 옮기는 것을 의미한다.

서버 컴퓨터들은 각각 ip주소와 호스트네임을 가진다.
우리가 사용하는 서비스들은 사용자가 사용하기위해 서버 컴퓨터들에 배포되어 실행되고 있다.
실제 사용자들의 서비스 요청은 해당 서버 컴퓨터로 전달되게 된다.
이 때 사용자가 많은 서비스의 경우에는 사용자들의 모든 트래픽을 한 대의 서버 컴퓨터가 감당할 수 없기에
여러 대의 서버 컴퓨터를 사용해 트래픽을 분산시킨다.
그렇기 때문에 하나의 서비스는 한 대의 서버가 아닌 여러 대의 서버를 둘 수 있다.
이런 경우에는 서버마다 해당 서비스가 배포되어 있어야 가능하다.


< 서버운영방식 - 온프레미스 >
  : 서버 인프라를 자체적으로 보유해 운영하는 방식.
  - 서버 한대가 일반 가정용과는 사양이 다르기에 서버를 만드는데 돈이 많이 든다. (수천억 이상)
    서버도 계속 돌아가야하므로 굉장히 많은 전력을 소모한다.
    서버가 한 두대가 아닌데 이 수많은 서버에서 발생하는 열 때문에 에어컨도 항시 가동해야한다.
    또한 서버 관리하는 전산실 상주인력, 인프라 엔지니어 등 인력도 필요하다.


< 서버운영방식 - 클라우드 > - 서비스의 개념
  : 외부에 있는 서버를 원격으로 빌리는 방식.
  - 온프레미스 방식의 단점을 보완하기 위해 사용하는 방식.
    : 사용자 입장에서는 서버 구매, 서버관리 인력 비용, 보안 문제 등을 신경쓰지 않아도 된다.
      서버 구축에 많은 비용을 들이기 어려운 스타트업 등에서 사용하기 좋음.
  ex) AWS
      : AWS에서는 필요한 서버의 사양, 예상 트래픽, 서버 사용 목적 등에 따라 서버를 선택하고
        그에 따른 일정 금액의 대여료를 지불하면 사용 가능한 서비스를 제공한다.


< 가상화 Virtualization > - 기술의 개념
: 하나의 물리 시스템에서 분리된 여러 환경, 전용 리소스를 구성하는 기술.

- 물리자원을 최대한 효율적으로 사용하기 위한 기술로
  한 서버의 하드웨어 자원을 최대한 활용 가능하도록 한다.

- 서버 가상화를 적용하기 위해서는 물리 서버에서 CPU의 사용률, 디스크의 I\O 접근빈도 및 용량 등에 대한 고려가 필요하다.
  1. CPU의 사용률
     : 한 대의 서버에 여러 게스트가 올라가는 상황이니 이미 CPU가 full로 사용되는 경우에는
       추가 게스트 또는 서비스를 올리는 게 서버에 과부화를 주게된다.
  2. 디스크의 I\O
     : 디스크의 I\O가 많이 발생하고 있는 상황인 경우에도 추가로 가상화를 사용하게되면 기존 서비스에 악영항을 줄 수 있다.

- 기본적으로 한 대의 물리 서버에서는 하나의 OS만 가동된다.
  가상화를 이용하면 하나의 물리 서버 위에서 여러 OS 가동이 가능해진다.

- 가상머신(VM) : 각각의 분리된 환경
               하이퍼바이저라는 소프트웨어에 의해 생성된다.
- host : 하이퍼바이저가 설치된 물리적 하드웨어
- guest : 하이퍼바이저에 의해 host의 리소스를 사용하는 VM

- 장점 : 가상화를 잘 이용하면 서버 비용을 줄이고 하드웨어 자원을 유용하게 사용가능.
- 단점 : 오히려 서버에 과부하를 주거나
        잘 설계되어있지 못한 경우에는 가상화버서는 VM간 간섭을 발생시켜 예상치 못한 문제를 발생시킬수도 있다.




