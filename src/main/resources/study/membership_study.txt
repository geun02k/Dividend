< 배당금프로젝트 - 간단하게 축약한 회원관리 >
회원관리기능은 security 패키지에서 관리한다.


=============================== << 스프링 시큐리티 >> ===============================
UserDetails
UserDetailsService


- @ElementCollection
  : 1:N의 매핑으로 테이블에 데이터가 저장.
  - 참고 블로그 : https://velog.io/@thsruddl77/Basic-attribute-type-should-not-be-a-container
- PasswordEncoder





=============================== << JWT (Json Web Token) >> ===============================
1. JWT
   : 사용자 인증 및 식별에 사용되는 토큰
   - 토큰은 사용자 정보를 포함한다.
   - Java 뿐 아닌 다양한 언어를 지원한다. (토큰을 주고받는 서버가 동일하지 않아도 된다.)
   - 한번 토큰이 생성되면 상태나 토큰에 대한 정보를 서버에서 관리하지 않는 것이 특징이다.
     (토큰 만료시간 필수, 토큰에 만료시간이 존재하지 않으면 이후에 토큰 유출시 임의로 서버에서 처리가 불가하기에 보안문제 발생가능.)
   - 세션과 같은 방법으로 사용자 정보를 처리할수도 있지만
     특별히 다른 방법을 써야하는 이유가 있는게 아니라면
     토큰을 이용한 구현방법이 일반적이기도 하고 세션방식보다 장점도 많아서
     토큰인증의 가장 기본인 JWT에 대해 이해해야지 이후에 서드파티(?)를 이용한 로그인, OAuth 같은 인증방법들도 적용가능.


2. JWT 구조
   : 아래의 구조는 .으로 구분된다.
   - Header : 토큰의 타입(ex JWT), 적용된 알고리즘에 대한 정보.
   - Payload : 사용자와 토큰에 대한 속성 정보 (ex 로그인한 사용자의 이름, 토큰만료시간 등)
               Payload는 JWT 토큰만 가지고 있으면 누구나 디코딩해서 정보를 열어볼 수 있다는 특징이있다.
               따라서 비밀번호같은 민감정보는 포함하고 있으면 안된다.
   - Signature : 서명에 대한 부분.
                 토큰이 유효한지 위조된 것인지 확인하기 위해 사용된다.
                 서명을 하기위해 해당 비밀키를 필요로하게 된다.


< 토큰생성 >
1. 비밀키 생성
   - 토큰 생성시 HS512알고리즘 사용을 위해 -> 512비트(64바이트 이상)의 시크릿키 사용.
   - 평문을 사용하기보다는 base64로 인코딩한 값을 사용.
   - 터미널에서 생성가능.
     : 평문키 파일을 생성해 base64로 인코딩한 새파일 생성
        C:\workspace\Dividend\src\main\resources\token>certutil -encode jwt_secret_key.txt jwt_secret_key_encoding.b64
        입력 길이 = 46
        출력 길이 = 122
        CertUtil: -encode 명령이 성공적으로 완료되었습니다.
   - 도움받은 블로그 : https://interconnection.tistory.com/120

2. application.yml에 설정 추가
   - jwt:
        secret: '생성한 비밀키 등록'

3. TokenProvider.java





< 암호화 알고리즘 >
평문 : 암호화 전 해독가능한 상태
암호문 : 암호화된 형태의 메시지
암호화(encryption) : 평문 -> 암호문
복호화(decryption) : 암호문 -> 평문
대칭키 : 동일키를 이용한 암,복호화시 대칭키를 사용한다고 한다.
비대칭키 : 메시지를 암,복호화하는 키가 다르면 비대칭키를 쓰는 알고리즘을 사용한 것이다.




